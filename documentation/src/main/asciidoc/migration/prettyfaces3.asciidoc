= PrettyFaces 3.x Migration Guide
Christian Kaltepoth
:description: This guide described the process of migrating existing PrettyFaces applications to Rewrite
:keywords: PrettyFaces, Rewrite, Migration
:toc:

== PrettyFaces 3.x Migration Guide

This guide describes how to migrate existing applications built using PrettyFaces 3.x to Rewrite 2.0.

There are basically two ways of migrating such applications to Rewrite:

PrettyFaces compatibility module:: This Rewrite module allows you to keep your old PrettyFace 3.x
  configuration and use it with Rewrite. The module supports both the XML configuration file
  +pretty-config.xml+ and the PrettyFaces annotations like +@URLMapping+. You should use this way
  of migration for your application if you don't want to modify your existing code.

JSF integration module:: If you don't want to use the old PrettyFaces 3.x configuration anymore and
  want to use all the new features of Rewrite, you should choose the Rewrite JSF integration module. 
  This module provides a new way of configuration and therefore requires you to adapt your 
  existing configuration.

NOTE: Both ways of migrating will only work for JSF 2.x applications.

The following sections will describe both ways in detail.

=== PrettyFaces compatibility module

Migrating application using PrettyFaces 3.x is very easy. Just follow the steps described below.

==== Update your dependencies

First you have to remove the old `com.ocpsoft.prettyfaces` dependency from your project. Open
your +pom.xml+ and remove the following entry:

[source,xml]
----
<dependency>
   <groupId>com.ocpsoft</groupId>
   <artifactId>prettyfaces-jsf2</artifactId>
   <version>3.3.3</version>
</dependency>
----

Now add the Rewrite servlet and the PrettyFaces compatibility module to your +pom.xml+:

[source,xml]
----
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-servlet</artifactId>
   <version>${rewrite.version}</version>
</dependency>
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-config-prettyfaces</artifactId>
   <version>${rewrite.version}</version>
</dependency>
----

Your code should still compile fine after updating the dependencies.


==== Filter registration

If you used PrettyFaces in a Servlet 3.0 environment, the required servlet filter is automatically 
registered. In this case you typically don't have an entry for the +PrettyFilter+ in your +web.xml+
and you can therefore skip this section.

If you added the +PrettyFilter+ manually to your +web.xml+, you will have to replace the filter
declaration to use the Rewrite filter instead. Locate the following entry in your +web.xml+:

[source,xml]
----
<filter>
   <filter-name>Pretty Filter</filter-name>
   <filter-class>com.ocpsoft.pretty.PrettyFilter</filter-class>
   <async-supported>true</async-supported>
</filter>
<filter-mapping> 
   <filter-name>Pretty Filter</filter-name> 
   <url-pattern>/*</url-pattern> 
   <dispatcher>FORWARD</dispatcher>
   <dispatcher>REQUEST</dispatcher>
   <dispatcher>INCLUDE</dispatcher>
   <dispatcher>ASYNC</dispatcher>
   <dispatcher>ERROR</dispatcher>
</filter-mapping>
----

Remove this entry completely and replace it with the corresponding entry for the +RewriteFilter+:

[source,xml]
----
<filter>
   <filter-name>OCPsoft Rewrite Filter</filter-name>
   <filter-class>org.ocpsoft.rewrite.servlet.RewriteFilter</filter-class>
   <async-supported>true</async-supported>
</filter>
<filter-mapping>
   <filter-name>OCPsoft Rewrite Filter</filter-name>
   <url-pattern>/*</url-pattern>
   <dispatcher>FORWARD</dispatcher>
   <dispatcher>REQUEST</dispatcher>
   <dispatcher>INCLUDE</dispatcher>
   <dispatcher>ASYNC</dispatcher>
   <dispatcher>ERROR</dispatcher>
</filter-mapping>
----

NOTE: Please not that if you are using a Servlet 3.x container and your +web.xml+ doesn't set
+metadata-complete="true"+, you don't have to register the Rewrite filter manually, because
this is done automatically. In this case just make sure to remove the old +PrettyFilter+ entry. 

==== Test your application

After having performed the changes described in the two sections, your migration is complete.
Although we consider the compatibility module to be very solid and stable, you should test your 
application carefully. If something doesn't work as before, let us know. :) 

=== JSF integration module

This section describes how to migrate existing PrettyFaces configuration to the Rewrite
JSF integration module.

==== Adding the Rewrite dependencies

If you want to use the Rewrite JSF integration module, you have to add the following dependencies
to your project.

[source,xml]
----
<!-- Rewrite with JSF integration -->
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-servlet</artifactId>
   <version>${rewrite.version}</version>
</dependency>
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-integration-jsf</artifactId>
   <version>${rewrite.version}</version>
</dependency>

<!-- optional: CDI integration -->
<dependency>
   <groupId>org.ocpsoft.rewrite</groupId>
   <artifactId>rewrite-integration-cdi</artifactId>
   <version>${rewrite.version}</version>
</dependency>
----

Adding the dependencies in a Servlet 3.0 environment will automatically register the required
Servlet listeners and filters.

==== PrettyFaces XML configuration

TODO

==== PrettyFaces Annotations

===== URL Mappings

The URL mappings of PrettyFaces have been replace with a Rewrite rule called +Join+. 
The concepts are very similar. You can specify a _virtual path_ that is mapped to a
physical server resource.

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLMapping(pattern = "/login", viewId = "/login.jsf")
public class CustomerDetailsBean {
  ...
}
----
|
----
@Join(path = "/login", to="/login.jsf")
public class CustomerDetailsBean {
  ...
}
|===

===== Path parameters

With PrettyFaces, path parameters were specified using EL-like expressions in the pattern.
With Rewrite you simply specify the parameter in the path pattern using +\{name\}+. Rewrite
automatically transforms the value into a query parameter with the same name. you can also
directly inject the value into your bean by adding the +@Parameter+ annotation to a field
with the same name as the parameter. 

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLMapping(
	pattern = "/customer/#{ id : customerDetailsBean.id }", 
	viewId = "/customer-details.jsf")
public class CustomerDetailsBean {

  private Long id;

}
----
|
----
@Join(path = "/customer/{id}", to="/customer-details.jsf")
public class CustomerDetailsBean {

  @Parameter
  private Long id;

}
|===

If you want to customize the regular expression that is used to match the parameter, just add
a +@Matches+ annotation:

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLMapping(
	pattern = "/customer/#{ /[0-9]+/ customerDetailsBean.id }", 
	viewId = "/customer-details.jsf")
public class CustomerDetailsBean {

  private Long id;

}
----
|
----
@Join(path = "/customer/{id}", to="/customer-details.jsf")
public class CustomerDetailsBean {

  @Parameter
  @Matches("[0-9]+")
  private Long id;

}
|===


===== Query parameters

Query parameters in Rewrite are handled the same way as path parameters. To inject the value
of a query parameter into your bean, add a +@Parameter+ to a field like this.

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLMapping(pattern = "/login", viewId = "/login.jsf")
public class CustomerDetailsBean {

  @URLQueryParam("q")
  private String query;

}
----
|
----
@Join(path = "/login", to="/login.jsf")
public class CustomerDetailsBean {

  @Parameter("q")
  private String query;

}
|===

TIP: You can omit the parameter name when using the +@Parameter+ annotation if the name of the query
     parameter is the same as the name of the field.


===== Page actions


To invoke a specific method in your bean when the page is accessed, add a +@RequestAction+ annotation
to the method. 

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLMapping(pattern = "/login", viewId = "/login.jsf")
public class CustomerDetailsBean {

   @URLAction
   public void action() {
      ...
   }

}
----
|
----
@Join(path = "/login", to="/login.jsf")
public class CustomerDetailsBean {

  @RequestAction
  public void action() {
     ...
  }

}
|===

The +ignorePostback+ attribute is now a separate annotation called +@IgnorePostback+.

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@URLAction(onPostback=false)
public void action() {
  ...
}
----
|
----
@RequestAction
@IgnorePostback
public void action() {
  ...
}
|===

TIP: Thie +@IgnorePostback+ annotation can also be used with +@Parameter+.

If the annotated bean has a scope that requires an active JSF lifecycle like for example
+@ViewScope+, you have to _defer_ the invocation so that it is executed within the JSF lifecycle. 
To do so add a +@Deferred+ annotation to the method.  

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
@ManagedBean
@ViewScoped
@URLMapping(pattern = "/login", viewId = "/login.jsf")
public class CustomerDetailsBean {

   @URLAction
   public void action() {
      ...
   }

}
----
|
----
@ManagedBean
@ViewScoped
@Join(path = "/login", to="/login.jsf")
public class CustomerDetailsBean {

  @RequestAction
  @Deferred
  public void action() {
     ...
  }

}
|===

===== Creating links

PrettyFaces shipped with a special JSF component that simplified creating links to mapped URLs.
However JSF 2.0 introduced +<h:link>+, which works fine for creating such links. Rewrite doesn't
include any special JSF component. It is recomended to use the standard JSF component for rendering
links.

Using +<h:link>+ for creating links to Rewrite URLs is very easy. Just use the URL you
configured as the +to+ part of the Join for the +outcome+. If the URL contains parameters,
set their value using +<f:param>+.

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
<pretty:link mappingId="customerDetails">
  <f:param value="123" />
  Show details
</pretty:link>
----
|
----
<h:link outcome="/customer-details.jsf">
  <f:param name="id" value="123"/>
  Show details
</h:link>
|===


===== Programmatic navigation

Programmatic navigation was very painful in PrettyFaces. To navigate to a page with path or
query parameters, you had to obtain a reference to the bean which the parameters were bound
to, set them to the desired values and return a PrettyFaces navigation string.

With Rewrite you can use the new +Navigate+ class, which provides a fluent way for navigation.
Just change your action method to return +Navigate+ instead of a string. 
Then use +Navigate.to(..)+ to select the target view. You can either supply a class annotated
with +@Join+ or specify the +to+ part of a join for that. Then you can use +with()+ to set the
values of the query or path parameters.

[cols="1a,1a", options="header"]
|===
|PrettyFaces
|Rewrite
| 
----
public String actionMethod() {
  // obtain the CustomerDetailsBean
  customerDetailsBean.setId("123");
  return "pretty:customerDetails";
}
----
|
----
public Navigate actionMethod() {
  return Navigate.to(CustomerDetailsBean.class)
      .with("id", "123");
}
|===

If you used the JSF 2.0 implicit navigation for navigating with PrettyFaces,
you can do so in Rewrite too.

----
public String actionMethod() {
  return "/customer-details.jsf?faces-redirect=true&id=123";
}
----
